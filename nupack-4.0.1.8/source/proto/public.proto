syntax = "proto2";

package nupack.proto;

option java_package = "org.nupack.proto";
option java_multiple_files = true;

/******************************************************************************/

enum Ensemble {
    STACKING   = 0;
    NOSTACKING = 1;
    DANGLE     = 2;
    COAXIAL    = 3;
    SOME       = 4;
    NONE       = 5;
    ALL        = 6;
}

enum Parameters {
    RNA = 0;
    RNA95 = 1;
    DNA = 2;
    RNA95_NUPACK3 = 3;
    RNA99_NUPACK3 = 4;
    DNA04_NUPACK3 = 5;
}

message Model {
    required double kelvin         = 1 [default = 310.15];   // non-negative
    required double sodium         = 2 [default = 1.0];      // non-negative
    required double magnesium      = 3 [default = 0.0];      // non-negative
    required Parameters parameters = 4 [default = RNA];
    required Ensemble ensemble     = 5 [default = STACKING];
    required string filename       = 6 [default = ""];
}

/******************************************************************************/

message Strand {
    required uint32 index   = 1;
    required string name = 2;
    required string sequence = 3; // at least one letter
}

message Complex {
    repeated uint32 strand_index = 1 [packed=true]; // at least one sequence
}

message SequenceList {
    repeated string sequences = 1;
}

/******************************************************************************/

message PairProbability {
    repeated float  diagonal = 1 [packed=true]; // all entries on the diagonal
    repeated uint32 rows     = 2 [packed=true];  // row of each other i j entry, i < j
    repeated uint32 cols     = 3 [packed=true];  // col of each other i j entry, i < j
    repeated float  values   = 4 [packed=true];  // value of each other i j entry, i < j
}

/******************************************************************************/

message ComplexSet {
    repeated Strand strands = 1;
    repeated Complex complex_indices      = 2;
}

message PairsJob {
    required Model      model     = 1;
    required ComplexSet complexes = 2;
}

message MFEJob {
    required Model      model     = 1;
    required ComplexSet complexes = 2;
}

/******************************************************************************/

message PairsResult {
    required PairProbability pairs = 1;
    required double log_partition_function = 2;
}

message MFEResult {
    required string mfe_structure = 1;
    required double mfe = 2;
}

/******************************************************************************/

message PairsResults {
    repeated PairsResult results = 1;
}

message MFEResults {
    repeated MFEResult results = 1;
}

/******************************************************************************/

message EnergyJob {
    repeated Strand strands = 1;
    required Model model = 2;
    required Complex   complex = 3;
    required string structure = 4;
}

/******************************************************************************/

message DesignDomain {
    required string name = 1;
    required string sequence = 2;
}

message DesignStrand {
    required string name = 1;
    repeated string domains = 2;
}

message DesignComplex {
    required string name = 1;
    repeated string strands = 2;
    required string structure = 3; // empty if not a target
}

message DesignTube {
    required string name = 1;
    repeated string complexes = 2;
    repeated double concentrations = 3 [packed=true]; // 1 for each complex name. =0 for offtargets
    required uint32 max_size = 4;
    repeated DesignComplex includes = 5;
    repeated DesignComplex excludes = 6;
}

message DesignOptions {
    required double objective_weight = 1  [default = 1.0];
    required uint64 seed             = 2  [default = 0]; // 0 means the seed is non-deterministic
    required double f_stop           = 3  [default = 0.02];
    required double f_passive        = 4  [default = 0.01];
    required int32  h_split          = 5  [default = -1]; // this will default to 2 for RNA or 3 for DNA
    required uint32 n_split          = 6  [default = 12];
    required double f_split          = 7  [default = 0.99];
    required double f_stringent      = 8  [default = 0.99];
    required double dg_clamp         = 9  [default = -20];
    required uint32 m_bad            = 10 [default = 300];
    required uint32 m_reseed         = 11 [default = 50];
    required uint32 m_reopt          = 12 [default = 3];
    required double f_redecomp       = 13 [default = 0.03];
    required double f_refocus        = 14 [default = 0.03];
    required double f_sparse         = 15 [default = 1e-05];
    required uint64 max_time         = 16 [default = 0]; // milliseconds, 0 means no timeout
    required uint64 checkpoint_time  = 17 [default = 1000]; // milliseconds, 0 means no checkpoints
    required uint64 defect_time      = 18 [default = 200]; // milliseconds, 0 means no defect emitted
    required bool   wobble_mutations = 19 [default = false];
}

message MatchConstraint {
    repeated string left = 1;
    repeated string right = 2;
}

message ComplementarityConstraint {
    repeated string left = 1;
    repeated string right = 2;
    required bool wobble_mutations = 3 [default = false];
}

message DiversityConstraint {
    repeated string domains = 1; // Empty if it's global
    required uint32 word_length = 2;
    required uint32 min_nucleotide_types = 3;
}

message WindowConstraint {
    repeated string domains = 1;
    repeated string sequences = 2;
}

message LibraryConstraint {
    repeated string domains = 1;
    repeated SequenceList libraries = 2;
}


message PatternConstraint {
    repeated string domains = 1; // Empty if it's global
    repeated string patterns = 2;
}

message SimilarityConstraint {
    repeated string domains = 1;
    required string reference = 2;
    required double min = 3;
    required double max = 4;
}

message SsmConstraint {
    repeated string complexes = 1; // Empty if it's global
    required uint32 word_size = 2;
}

message EnergyMatchConstraint {
    repeated string domains = 1;
    required double energy_ref = 2 [default = inf];
}


message ConstraintObjective {
    oneof content {
        PatternConstraint pattern = 1;
        SimilarityConstraint similarity = 2;
        SsmConstraint ssm = 3;
        EnergyMatchConstraint energy_match = 4;
    }
}

message SoftConstraint {
    required ConstraintObjective constraint = 1;
    required double weight = 2 [default = 1.0];
}

message HardConstraint {
    oneof content {
        MatchConstraint match = 1;
        ComplementarityConstraint complementarity = 2;
        PatternConstraint pattern = 3;
        DiversityConstraint diversity = 4;
        LibraryConstraint library = 5;
        WindowConstraint window = 6;
        SimilarityConstraint similarity = 7;
    }
}

message DesignWeight {
    required string tube = 1; // empty string if applies to all tubes (same for next 3 too)
    required string complex = 2;
    required string strand = 3;
    required string domain = 4;
    required double weight = 5;
    optional bool multiplier=6;
}

message DesignJob {
    required Model model = 1;
    repeated DesignDomain domains = 2;
    repeated DesignStrand strands = 3;
    repeated DesignComplex complexes = 4;
    repeated DesignTube tubes = 5; // for complex design this is empty
    required DesignOptions options = 6;
    repeated HardConstraint hard_constraints = 7;
    repeated SoftConstraint soft_constraints = 8;
    repeated DesignWeight weights = 9;
    required uint32 trial = 10;
}

message DesignComplexResult {
    required string name = 1;
    required double log_partition_function = 2;
    required double defect = 3;
    required double normalized_defect = 4;
    required PairProbability pair_probabilities = 5;
    required double energy = 6;
}

message DesignTubeComplexResult {
    required string name = 1;
    required double concentration = 2;
    required double target_concentration = 3;
    required double defect = 4;
    required double structural_defect = 5;
    required double concentration_defect = 6;
    required double normalized_defect_contribution = 7;
}

message DesignTubeResult {
    required string name = 1;
    required double nucleotide_concentration = 2;
    required double defect = 3;
    required double normalized_defect = 4;
    repeated DesignTubeComplexResult complexes = 5;
}

message DesignPartition {
    repeated bool mask = 1 [packed=true];
    required double deflate = 2;
}

message DesignStats {
    required uint32 num_leaf_evaluations = 1;
    required uint32 num_reseeds = 2;
    repeated uint32 num_redecompositions = 3 [packed=true];
    repeated uint32 offtargets_added_per_refocus = 4 [packed=true];
    required double design_time = 5;
    required double analysis_time = 6;
    required DesignPartition final_Psi = 7;
    required uint64 seed = 8;
}

message DefectHistory {
    repeated double defects = 1 [packed=true];
    repeated uint64 wall_times = 2 [packed=true];
    repeated bool root = 3 [packed=true]; // true if root
}

message DesignResult {
    repeated DesignDomain domains = 1; // designed domains, named same way as input ones
    repeated double unweighted_defects = 2; // unweighted defects, starting with the ensemble defect, then every soft constraint afterwards (in order)
    repeated double weighted_defects = 3; // weighted defects, starting with the ensemble defect, then every soft constraint afterwards (in order)
    repeated DesignComplexResult complexes = 4;
    repeated DesignTubeResult tubes = 5;
    required DesignStats stats = 6;
    required DefectHistory history = 7;
    required uint32 trial = 8;
}

/******************************************************************************/

message CheckpointContent {
    oneof content {
        DesignResult design_checkpoint = 1;
    }
}

/******************************************************************************/

message Checkpoint {
    required string id = 1;
    required uint64 time = 2;
    required CheckpointContent content = 3;
}

/******************************************************************************/

message ExceptionResult {
    required string exception = 1;
}

message BackendCancelledResult {
    required uint64 timestamp = 1;
}

/******************************************************************************/

message BackendJobInput {
    oneof content {
        PairsJob         pairs_job          = 1;
        MFEJob           mfe_job            = 2;
        DesignJob        design_job         = 3;
    }
}

/******************************************************************************/

message BackendJobOutput {
    oneof content {
        PairsResults pairs_results = 1;
        MFEResults mfe_results = 2;
        DesignResult design_results = 3;
        ExceptionResult exception = 4;
        BackendCancelledResult cancelled = 5;
    }
}

message BackendResult {
    required string id = 1;
    required uint64 resources_used = 2;
    required BackendJobOutput output = 3;
}

/******************************************************************************/

message HeartbeatProgress {
    required bool complete = 1;
    required bool frontend = 2;
}

message BatchProgress { // for mfe and pairs
    required uint32 current = 1;
    required uint32 total = 2;
}

message DefectProgress {
    required double defect = 1; //design trial uuid : current defect
    required double weighted_defect = 2;
    required bool new_upload = 3;
    required bool root = 4; //true if root (circle)
    required uint32 trial = 5;
}

message ExceptionProgress {
    required string exception = 1;
}

message ProgressContent {
    oneof content {
        HeartbeatProgress heartbeat = 1; // send with complete=true at the end for every job
        BatchProgress batch = 2;
        DefectProgress defect = 3;
        ExceptionProgress exception = 4;
    }
}

message Progress {
    required string id = 1;
    required uint64 time = 2;
    required ProgressContent content = 3;
}

/******************************************************************************/

message BackendJob {
     required string id                    = 1;
     required string frontend_job_id = 2;
     required uint32 slots               = 3 [default = 1];
     required BackendJobInput input = 4;
}

/******************************************************************************/

message FrontendAnalysisTube {
    repeated double log_concentrations = 1;
    repeated Strand strands = 2;
    required string name = 3;
    repeated Complex complexes = 4;
    required uint32 max_size = 5;
    repeated Complex includes = 6;
    repeated Complex excludes = 7;
}

message FrontendAnalysisJob {
    repeated FrontendAnalysisTube tubes = 1;
    repeated Model models = 2;
}

message FrontendConcentrationJob {
    repeated FrontendAnalysisTube tubes = 1;
    repeated Model models = 2;
    required string base_id = 3;
}

message FrontendUtilityJob {
    oneof content {
        FrontendUtilityDesignJob design = 1;
        FrontendUtilityPairsJob analysis = 2;
    }
}

message FrontendUtilityDesignJob {
    required Model model = 1;
    repeated DesignDomain domains = 2;
    repeated DesignStrand strands = 3;
    required DesignComplex complex = 4;
    required DesignOptions options = 5;
}

message FrontendUtilityPairsJob {
    required Model model = 1;
    repeated Strand strands = 2;
    required Complex complex = 3;
    required string structure = 4;
}

message FrontendDesignJob {
    required DesignJob spec = 1;
    required uint32 trials = 2;
}

message FrontendJob {
    optional string id = 1;
    optional string parent_id = 2;
    oneof content {
        FrontendAnalysisJob analysis = 3;
        FrontendConcentrationJob concentration = 4;
        FrontendDesignJob design = 7;
        FrontendUtilityJob utility = 8;
    }
    required UserInputs inputs = 9;
}

message UserInputs {
    repeated string structures = 1;
    repeated string sequences = 2;
    repeated DesignWeight weights = 3;
}

/******************************************************************************/

message FrontendAnalysisConditions {
    required FrontendAnalysisTube tube = 1;
    required Model model = 2;
}

message FrontendAnalysisTubeResult {
    required FrontendAnalysisConditions conditions = 1;
    repeated Complex complexes = 2;
    required PairsResults pairs = 3;
    required MFEResults mfe = 4;
}

message FrontendAnalysisResults {
    repeated FrontendAnalysisTubeResult tube_result = 1;
}

/******************************************************************************/

message FrontendCancellationRequest {
    required string id = 1;
    optional uint64 time = 2;
    optional string audit_reason = 3;
}

message FrontendCancellationResult {
    required FrontendCancellationRequest request = 1;
    map<string, int64> cancel_time = 2;
}

/******************************************************************************/

message FrontendDesignResults {
    repeated string trial_names = 1;
    repeated DesignResult results = 2;
    optional FrontendCancellationRequest stop_request = 3;
}

message FrontendUtilityResult {
    required string structure = 1;
    required double energy = 2;
    repeated Strand strands = 3;
    required Complex complex = 4;
    required PairsResult pairs = 5;
}

/******************************************************************************/

message FrontendResult {
    required string id = 1;
    optional string parent_id = 2;
    oneof content {
        FrontendAnalysisResults analysis = 3;
        FrontendDesignResults design = 6;
        ExceptionResult exception = 7;
        FrontendCancellationResult cancellation = 8;
        FrontendUtilityResult utility = 9;
    }
}

/******************************************************************************/
